original file
-----------------------------------
class Foo {
    readonly baz = 
        this.bar() ||
        (this.bar() && 
        this.bar());

    bar() {
        return true;
    }
}
-----------------------------------

Grammar: TypeScript.tmLanguage
-----------------------------------
>class Foo {
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^^^
       source.ts meta.class.ts entity.name.type.class.ts
          ^
          source.ts meta.class.ts
           ^
           source.ts meta.class.ts punctuation.definition.block.ts
>    readonly baz = 
 ^^^^
 source.ts meta.class.ts
     ^^^^^^^^
     source.ts meta.class.ts meta.field.declaration.ts storage.modifier.ts
             ^
             source.ts meta.class.ts meta.field.declaration.ts
              ^^^
              source.ts meta.class.ts meta.field.declaration.ts meta.definition.property.ts variable.object.property.ts
                 ^
                 source.ts meta.class.ts meta.field.declaration.ts
                  ^
                  source.ts meta.class.ts meta.field.declaration.ts keyword.operator.assignment.ts
                   ^^
                   source.ts meta.class.ts meta.field.declaration.ts
>        this.bar() ||
 ^^^^^^^^
 source.ts meta.class.ts meta.field.declaration.ts
         ^^^^
         source.ts meta.class.ts meta.field.declaration.ts meta.function-call.ts variable.language.this.ts
             ^
             source.ts meta.class.ts meta.field.declaration.ts meta.function-call.ts punctuation.accessor.ts
              ^^^
              source.ts meta.class.ts meta.field.declaration.ts meta.function-call.ts entity.name.function.ts
                 ^
                 source.ts meta.class.ts meta.field.declaration.ts meta.brace.round.ts
                  ^
                  source.ts meta.class.ts meta.field.declaration.ts meta.brace.round.ts
                   ^
                   source.ts meta.class.ts meta.field.declaration.ts
                    ^^
                    source.ts meta.class.ts meta.field.declaration.ts keyword.operator.logical.ts
>        (this.bar() && 
 ^^^^^^^^
 source.ts meta.class.ts meta.field.declaration.ts
         ^
         source.ts meta.class.ts meta.field.declaration.ts meta.brace.round.ts
          ^^^^
          source.ts meta.class.ts meta.field.declaration.ts meta.function-call.ts variable.language.this.ts
              ^
              source.ts meta.class.ts meta.field.declaration.ts meta.function-call.ts punctuation.accessor.ts
               ^^^
               source.ts meta.class.ts meta.field.declaration.ts meta.function-call.ts entity.name.function.ts
                  ^
                  source.ts meta.class.ts meta.field.declaration.ts meta.brace.round.ts
                   ^
                   source.ts meta.class.ts meta.field.declaration.ts meta.brace.round.ts
                    ^
                    source.ts meta.class.ts meta.field.declaration.ts
                     ^^
                     source.ts meta.class.ts meta.field.declaration.ts keyword.operator.logical.ts
                       ^^
                       source.ts meta.class.ts meta.field.declaration.ts
>        this.bar());
 ^^^^^^^^
 source.ts meta.class.ts meta.field.declaration.ts
         ^^^^
         source.ts meta.class.ts meta.field.declaration.ts meta.function-call.ts variable.language.this.ts
             ^
             source.ts meta.class.ts meta.field.declaration.ts meta.function-call.ts punctuation.accessor.ts
              ^^^
              source.ts meta.class.ts meta.field.declaration.ts meta.function-call.ts entity.name.function.ts
                 ^
                 source.ts meta.class.ts meta.field.declaration.ts meta.brace.round.ts
                  ^
                  source.ts meta.class.ts meta.field.declaration.ts meta.brace.round.ts
                   ^
                   source.ts meta.class.ts meta.field.declaration.ts meta.brace.round.ts
                    ^
                    source.ts meta.class.ts punctuation.terminator.statement.ts
>
 ^
 source.ts meta.class.ts
>    bar() {
 ^^^^
 source.ts meta.class.ts meta.method.declaration.ts
     ^^^
     source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts
        ^
        source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
         ^
         source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.end.ts
          ^
          source.ts meta.class.ts meta.method.declaration.ts
           ^
           source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
>        return true;
 ^^^^^^^^
 source.ts meta.class.ts meta.method.declaration.ts meta.block.ts
         ^^^^^^
         source.ts meta.class.ts meta.method.declaration.ts meta.block.ts keyword.control.flow.ts
               ^
               source.ts meta.class.ts meta.method.declaration.ts meta.block.ts
                ^^^^
                source.ts meta.class.ts meta.method.declaration.ts meta.block.ts constant.language.boolean.true.ts
                    ^
                    source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.terminator.statement.ts
>    }
 ^^^^
 source.ts meta.class.ts meta.method.declaration.ts meta.block.ts
     ^
     source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
>}
 ^
 source.ts meta.class.ts punctuation.definition.block.ts